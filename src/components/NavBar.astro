---
import "astro-pagefind";
import "@/styles/components/navbar.css";

import SdepMoneConfig from "../../app.config";
import { i18n } from "../locales/translation";
import { Icon } from "astro-icon/components";
import SearchBar from "./SearchBar.svelte";
import MobileSearchBar from "./MobileSearchBar.svelte";

const navCount = SdepMoneConfig.navigators.length;
---

<nav class="nav" id="nav">
  <div
    class="relative flex h-[4rem] w-full items-center justify-between overflow-visible lg:h-[4.5rem]"
  >
    <!-- Mobile -->
    <div class="brand after:content-['']">
      <button
        id="menu-switcher"
        type="button"
        class="h-[40px] w-[44px] content-center"
      >
        <Icon
          id="menu-icon-closed"
          size={24}
          name="line-md:close-to-menu-transition"
          class="mx-auto hidden"
        />
        <Icon
          id="menu-icon-opened"
          size={24}
          name="line-md:menu-to-close-transition"
          class="mx-auto hidden"
        />
      </button>
      <a class="title-navbar" href="/">
        {SdepMoneConfig.brandTitle}
      </a>
    </div>
    <!-- Desktop -->
    <a class="brand-lg" href="/">
      <div class="title-navbar">
        <img
          class="lozad top-0 left-0 mr-2 h-10 rounded-l-3xl"
          data-src={SdepMoneConfig.logoUrl}
          alt="Logo"
        />
        <p>
          <span class="text-primary font-bold"
            >{SdepMoneConfig.appTitle.sdep}</span
          ><span class="text-[var(--text-color-lighten)] font-bold"
            >{SdepMoneConfig.appTitle.mone}</span
          >
        </p>
      </div>
    </a>

    <div class="toolbar">
      <div class="lg:hidden">
        <MobileSearchBar client:only="svelte" />
      </div>
      <div class="hidden lg:block">
        <SearchBar client:only="svelte" />
      </div>
      <div class="theme">
        <button type="button" id="theme-switcher">
          <Icon
            id="theme-icon-light"
            name="line-md:moon-alt-to-sunny-outline-loop-transition"
            size={24}
            class="hidden"
          />
          <Icon
            id="theme-icon-dark"
            name="line-md:sunny-outline-to-moon-alt-loop-transition"
            size={24}
            class="hidden"
          />
        </button>
      </div>
    </div>
  </div>

  <div id="mobile-menu" class="px-3 transition-all">
    <ul
      id="mobile-menu-nav"
      class="mobile-menu-nav mobile-menu-nav-closed flex flex-col space-y-6 overflow-hidden text-xl font-medium text-[var(--text-color)] transition-all duration-300"
    >
      {
        SdepMoneConfig.navigators.map((nav) => (
          <li class="mt-1">
            <a href={nav.href} class="mobile-nav-item">
              <div class="flex flex-row items-center space-x-2">
                <span class="text-[var(--primary-color)]">Â·</span>
                <span>{i18n(nav.nameKey)}</span>
              </div>
              <Icon
                name="cuida:caret-right-outline"
                class="text-[var(--text-color-lighten)]"
              />
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<style define:vars={{ navCount }}>
  .mobile-menu-nav-opened {
    opacity: 1;
    height: calc(var(--navCount) * 52px);
  }
</style>

<script>
  /**
   * Reinitializes an SVG icon by cloning it and replacing the original icon with the clone.
   *
   * @param icon - The SVG element to be reinitialized.
   * @returns The cloned SVG element that replaced the original.
   */
  const reinitializeIcon = (icon: SVGElement) => {
    const cloned = icon.cloneNode(true) as SVGElement;
    icon.parentNode?.replaceChild(cloned, icon);
    return cloned;
  };

  // get elements
  const menuSwitcher = document.getElementById(
    "menu-switcher",
  ) as HTMLButtonElement;
  const mobileMenuNav = document.getElementById(
    "mobile-menu-nav",
  ) as HTMLUListElement;
  const mobileMenuNavItems = document.getElementsByClassName("mobile-nav-item");
  let menuIconClosed = document.getElementById(
    "menu-icon-closed",
  ) as any as SVGElement;
  let menuIconOpened = document.getElementById(
    "menu-icon-opened",
  ) as any as SVGElement;

  // menu state
  let isMenuOpen = false;

  // switch menu open / close
  const switchMenuState = () => {
    menuIconClosed.style.display = isMenuOpen ? "block" : "none";
    menuIconOpened.style.display = !isMenuOpen ? "block" : "none";
    if (isMenuOpen) menuIconClosed = reinitializeIcon(menuIconClosed);
    else menuIconOpened = reinitializeIcon(menuIconOpened);
    if (isMenuOpen) {
      mobileMenuNav.classList.replace(
        "mobile-menu-nav-opened",
        "mobile-menu-nav-closed",
      );
    } else {
      mobileMenuNav.classList.replace(
        "mobile-menu-nav-closed",
        "mobile-menu-nav-opened",
      );
    }
    isMenuOpen = !isMenuOpen;
  };

  // click menu item then close menu
  menuSwitcher.addEventListener("click", switchMenuState);
  for (let i = 0; i < mobileMenuNavItems.length; ++i) {
    mobileMenuNavItems.item(i)?.addEventListener("click", switchMenuState);
  }
  // click other elements then close menu
  document.addEventListener("click", (event) => {
    if (
      !menuSwitcher.contains(event.target as any) &&
      !mobileMenuNav.contains(event.target as any) &&
      isMenuOpen
    ) {
      switchMenuState();
    }
  });

  // Theme switcher
  // Get elements
  const themeSwitcher = document.getElementById(
    "theme-switcher",
  ) as HTMLButtonElement;
  let themeIconLight = document.getElementById(
    "theme-icon-light",
  ) as any as SVGElement;
  let themeIconDark = document.getElementById(
    "theme-icon-dark",
  ) as any as SVGElement;

  // Record the current theme
  let currentTheme = localStorage.getItem("theme") || "light";

  // Set theme
  const setTheme = (theme: string) => {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
    currentTheme = theme;

    // Show/hide icons for different themes
    themeIconDark.style.display = theme === "dark" ? "block" : "none";
    themeIconLight.style.display = theme === "light" ? "block" : "none";

    // If the theme is dark, update the dark icon; otherwise, update the light icon
    if (theme === "dark") themeIconDark = reinitializeIcon(themeIconDark);
    else themeIconLight = reinitializeIcon(themeIconLight);

    // Toggle dark class
    document.documentElement.classList.toggle("dark", theme === "dark");
  };

  // Click to switch theme
  themeSwitcher.addEventListener("click", () => {
    setTheme(currentTheme === "light" ? "dark" : "light");
  });

  // Initialize
  document.addEventListener("DOMContentLoaded", () => {
    setTheme(currentTheme);
    menuIconClosed.style.display = "block";
  });

  // fold nav bar when scroll down
  const navBarElement = document.getElementById("nav");
  const bannerElement = document.getElementById("banner");
  const bannerHeight = bannerElement!.offsetHeight - 50;
  let lastYPos = 0;
  window.addEventListener("scroll", () => {
    if (bannerHeight < window.scrollY && window.scrollY > lastYPos) {
      navBarElement!.style.top = "-72px";
    } else {
      navBarElement!.style.top = "0";
    }
    lastYPos = window.scrollY;
  });
</script>

<script is:inline>
  // load pagefind
  async function loadPagefind() {
    const pagefind = await import("/pagefind/pagefind.js");
    await pagefind.options({
      excerptLength: 20,
    });
    pagefind.init();
    window.pagefind = pagefind;
    pagefind.search("");
  }
  loadPagefind();
</script>

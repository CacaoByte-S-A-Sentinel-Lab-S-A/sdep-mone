---
import "../styles/components/banner.css";
import SdepMoneConfig from "../../app.config";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";

export interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string | string[];
  slug?: string;
  titleGame?: string;
}
const { title, subTitle, bannerImage, slug, titleGame } = Astro.props ?? {};

const hasTitle = title !== undefined || subTitle !== undefined;
const hasHeaderImg = bannerImage !== undefined || slug !== undefined;

let carouselImgsList: string[] = [];

//  Decide si usar bannerImage como carrusel personalizado
if (Array.isArray(bannerImage) && bannerImage.length > 0) {
  carouselImgsList = bannerImage;
} else if (!bannerImage) {
  carouselImgsList = SdepMoneConfig.banners; // fallback
}


const carouselAnimationTime = `${carouselImgsList.length * 6}s`;
---

<div id="banner" class="banner onload-animation-fade-in h-full w-full">
  <div class="transition-main banner-inner h-full w-full">

    {
      Array.isArray(bannerImage) && bannerImage.length > 0 ? (
        <div class="carousel">
          <ul id="carousel_imgs">
            {carouselImgsList.map((img, index) => (
              <li
                class="item lozad"
                style={{ animationDelay: `${index * 6}s` }}
                data-background-image={img}
              />
            ))}
          </ul>
        </div>
      ) : (
        <div class="cover">
      <img
          class="item lozad object-contain object-top w-full max-h-[1500px]"
          data-src={typeof bannerImage === "string" ? bannerImage : GetCoverURLForUnspecifiedEntry(slug ?? "")}
          alt="PostCover"
        />


        </div>
      )
    }
    <div class="relative h-[95%] w-full">
      <div
        class="absolute top-1/2 left-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4"
      >
        <div class="flex flex-col">
          <h1
            class:list={[hasTitle ? "title-normal" : "title-index"]}
            class="title"
          >
            {title ?? SdepMoneConfig.title}
          </h1>
          <!-- <h2 class="subtitle">{titleGame ?? SdepMoneConfig.titleGame }</h2> -->
        </div>
      </div>
    </div>
  </div>
  <div class="waves" id="header-waves">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        >
        </path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="opacity-25"
          style={{ animationDelay: "-2s", animationDuration: "7s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="opacity-50"
          style={{ animationDelay: "-3s", animationDuration: "10s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="opacity-75"
          style={{ animationDelay: "-4s", animationDuration: "13s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          style={{ animationDelay: "-5s", animationDuration: "20s" }}></use>
      </g>
    </svg>
  </div>
</div>

<script>
  const styleElement = document.createElement("style");
  const carouselImgs = document.getElementById("carousel_imgs");
  const carouselImgsCount = carouselImgs?.children.length ?? 0;

  const carouselAnimation = `
  @keyframes carousel-animation {
    0% {
      opacity: 0;
      transform: scale(1);
    }
    3% {
      opacity: 1;
    }
    8% {
      opacity: 1;
      animation-timing-function: ease-out;
    }
    ${100 / carouselImgsCount}% {
      opacity: 1;
    }
    ${100 / carouselImgsCount + 50 / carouselImgsCount}% {
      opacity: 0;
      animation-timing-function: ease-out;
    }
    100% {
      opacity: 0;
      transform: scale(2);
    }
  }
  `;
  styleElement.textContent = carouselAnimation;
  let bannerElement = document.getElementById("banner");
  if (bannerElement && !bannerElement.querySelector("style"))
    bannerElement.appendChild(styleElement);
</script>

<style define:vars={{ carouselAnimationTime }}>
  .carousel .item {
    animation: carousel-animation var(--carouselAnimationTime) linear infinite
      0s;
    backface-visibility: hidden;
    transform-style: preserve-3d;
  }
</style>
